// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tapster.DataAccess;

namespace Tapster.DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Tapster.DomainEntities.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<Guid?>("ParentCategoryId");

                    b.Property<Guid>("VenueId");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.HasIndex("VenueId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Tapster.DomainEntities.Entities.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Tapster.DomainEntities.Entities.ClientSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ClientId");

                    b.Property<Guid>("SessionId");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("SessionId");

                    b.ToTable("ClientSession");
                });

            modelBuilder.Entity("Tapster.DomainEntities.Entities.Manager", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.HasKey("Id");

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("Tapster.DomainEntities.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ClientSessionId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<TimeSpan?>("ETA");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("ClientSessionId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Tapster.DomainEntities.Entities.OrderProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<Guid>("OrderId");

                    b.Property<Guid>("ProductId");

                    b.Property<int>("Quantity");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProducts");
                });

            modelBuilder.Entity("Tapster.DomainEntities.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CategoryId");

                    b.Property<int>("Currency");

                    b.Property<string>("Description");

                    b.Property<bool>("IsAvailable");

                    b.Property<string>("Name");

                    b.Property<decimal>("Price");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Tapster.DomainEntities.Entities.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Status");

                    b.Property<Guid>("TableId");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("Tapster.DomainEntities.Entities.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Capacity");

                    b.Property<string>("Code");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<Guid>("VenueId");

                    b.HasKey("Id");

                    b.HasIndex("VenueId");

                    b.ToTable("Tables");
                });

            modelBuilder.Entity("Tapster.DomainEntities.Entities.Venue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("Description");

                    b.Property<string>("ImageUrl");

                    b.Property<Guid>("MangerId");

                    b.Property<string>("Name");

                    b.Property<string>("Site");

                    b.HasKey("Id");

                    b.HasIndex("MangerId");

                    b.ToTable("Venues");
                });

            modelBuilder.Entity("Tapster.DomainEntities.Entities.Waiter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<Guid>("VenueId");

                    b.HasKey("Id");

                    b.HasIndex("VenueId");

                    b.ToTable("Waiters");
                });

            modelBuilder.Entity("Tapster.DomainEntities.Entities.WaiterTable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("TableId");

                    b.Property<Guid>("WaiterId");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.HasIndex("WaiterId");

                    b.ToTable("WaiterTables");
                });

            modelBuilder.Entity("Tapster.DomainEntities.Entities.Category", b =>
                {
                    b.HasOne("Tapster.DomainEntities.Entities.Category", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tapster.DomainEntities.Entities.Venue", "Venue")
                        .WithMany("Categories")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Tapster.DomainEntities.Entities.ClientSession", b =>
                {
                    b.HasOne("Tapster.DomainEntities.Entities.Client", "Client")
                        .WithMany("ClientSessions")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tapster.DomainEntities.Entities.Session", "Session")
                        .WithMany("ClientSessions")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Tapster.DomainEntities.Entities.Order", b =>
                {
                    b.HasOne("Tapster.DomainEntities.Entities.ClientSession", "ClientSession")
                        .WithMany("Orders")
                        .HasForeignKey("ClientSessionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Tapster.DomainEntities.Entities.OrderProduct", b =>
                {
                    b.HasOne("Tapster.DomainEntities.Entities.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tapster.DomainEntities.Entities.Product", "Product")
                        .WithMany("OrderProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Tapster.DomainEntities.Entities.Product", b =>
                {
                    b.HasOne("Tapster.DomainEntities.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Tapster.DomainEntities.Entities.Session", b =>
                {
                    b.HasOne("Tapster.DomainEntities.Entities.Table", "Table")
                        .WithMany("Sessions")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Tapster.DomainEntities.Entities.Table", b =>
                {
                    b.HasOne("Tapster.DomainEntities.Entities.Venue", "Venue")
                        .WithMany("Tables")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Tapster.DomainEntities.Entities.Venue", b =>
                {
                    b.HasOne("Tapster.DomainEntities.Entities.Manager", "Manager")
                        .WithMany("Venues")
                        .HasForeignKey("MangerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Tapster.DomainEntities.Entities.Waiter", b =>
                {
                    b.HasOne("Tapster.DomainEntities.Entities.Venue", "Venue")
                        .WithMany("Waiters")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Tapster.DomainEntities.Entities.WaiterTable", b =>
                {
                    b.HasOne("Tapster.DomainEntities.Entities.Table", "Table")
                        .WithMany("WaiterTables")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Tapster.DomainEntities.Entities.Waiter", "Waiter")
                        .WithMany("WaiterTables")
                        .HasForeignKey("WaiterId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
